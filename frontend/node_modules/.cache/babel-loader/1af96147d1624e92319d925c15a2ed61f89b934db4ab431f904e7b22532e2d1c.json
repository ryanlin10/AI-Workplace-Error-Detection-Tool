{"ast":null,"code":"var _jsxFileName = \"/Users/suleimanmahmood/Documents/software engineering stuff/BuildX2/frontend/src/components/AudioRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './AudioRecorder.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = ({\n  isRecording,\n  onTranscriptUpdate\n}) => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [manualInput, setManualInput] = useState('');\n  const [useFallback, setUseFallback] = useState(false);\n  const [recognitionActive, setRecognitionActive] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const prevRecordingStateRef = useRef(false);\n\n  // Reset transcript when starting a new recording\n  useEffect(() => {\n    // Check if isRecording changed from false to true\n    if (isRecording && !prevRecordingStateRef.current) {\n      console.log('Starting new recording, resetting transcript');\n      setTranscript('');\n      setManualInput('');\n      // Explicitly notify parent of reset\n      onTranscriptUpdate('');\n    } else if (!isRecording && prevRecordingStateRef.current) {\n      console.log('Stopping recording, final transcript:', transcript);\n      // Ensure the final transcript is sent to the parent component\n      onTranscriptUpdate(transcript);\n    }\n\n    // Update previous recording state\n    prevRecordingStateRef.current = isRecording;\n  }, [isRecording, onTranscriptUpdate, transcript]);\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window) {\n      console.log('Speech recognition is available');\n      const SpeechRecognition = window.webkitSpeechRecognition;\n\n      // Destroy previous instance if it exists\n      if (recognitionRef.current) {\n        try {\n          recognitionRef.current.stop();\n        } catch (e) {\n          console.log('Error stopping previous recognition instance:', e);\n        }\n      }\n\n      // Create fresh instance\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.lang = 'en-US'; // Set language explicitly\n\n      // Test if we can actually start it\n      try {\n        console.log('Testing speech recognition initialization...');\n        recognitionRef.current.start();\n        setTimeout(() => {\n          if (recognitionRef.current) {\n            recognitionRef.current.stop();\n            console.log('Speech recognition initialized successfully');\n          }\n        }, 500);\n      } catch (error) {\n        console.error('Error during speech recognition test:', error);\n        setUseFallback(true);\n      }\n      recognitionRef.current.onstart = () => {\n        console.log('Speech recognition started');\n        setRecognitionActive(true);\n      };\n      recognitionRef.current.onend = () => {\n        console.log('Speech recognition ended');\n        setRecognitionActive(false);\n\n        // Restart recognition if we're still recording\n        if (isRecording && !useFallback) {\n          console.log('Restarting speech recognition');\n          try {\n            recognitionRef.current.start();\n          } catch (error) {\n            console.error('Error restarting speech recognition:', error);\n          }\n        }\n      };\n      recognitionRef.current.onresult = event => {\n        console.log('Speech recognition result event received', event);\n        console.log('Number of results:', event.results.length);\n        console.log('Current transcript state:', transcript);\n        let finalTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcriptText = event.results[i][0].transcript;\n          console.log(`Result ${i}: ${transcriptText} (isFinal: ${event.results[i].isFinal})`);\n          if (event.results[i].isFinal) {\n            finalTranscript += transcriptText;\n          }\n        }\n        if (finalTranscript) {\n          console.log('New transcript segment:', finalTranscript);\n          // Only append if we're actively recording\n          if (isRecording) {\n            const currentTranscript = transcript + ' ' + finalTranscript;\n            console.log('Updated full transcript:', currentTranscript);\n            setTranscript(currentTranscript);\n            onTranscriptUpdate(currentTranscript);\n          } else {\n            console.log('Ignoring speech recognition result while not recording');\n          }\n        } else {\n          console.log('No final transcript in this result batch');\n        }\n      };\n      recognitionRef.current.onerror = event => {\n        console.error('Speech recognition error', event.error);\n        if (event.error === 'no-speech' || event.error === 'audio-capture' || event.error === 'not-allowed') {\n          setUseFallback(true);\n        }\n      };\n    } else {\n      console.error('Speech recognition not supported in this browser');\n      setUseFallback(true);\n    }\n    return () => {\n      if (recognitionRef.current) {\n        try {\n          recognitionRef.current.stop();\n        } catch (error) {\n          console.error('Error stopping speech recognition:', error);\n        }\n      }\n    };\n  }, [isRecording, useFallback]);\n\n  // Handle recording state changes\n  useEffect(() => {\n    if (isRecording && !useFallback) {\n      console.log('Starting audio recording and speech recognition');\n\n      // Check microphone permissions explicitly\n      if (navigator.permissions && navigator.permissions.query) {\n        navigator.permissions.query({\n          name: 'microphone'\n        }).then(permissionStatus => {\n          console.log('Microphone permission status:', permissionStatus.state);\n          if (permissionStatus.state === 'denied') {\n            console.error('Microphone permission denied by browser');\n            setUseFallback(true);\n            return;\n          }\n          startRecordingWithPermission();\n        }).catch(error => {\n          console.error('Error checking permissions:', error);\n          // Try anyway since permissions API might not be supported\n          startRecordingWithPermission();\n        });\n      } else {\n        // Permissions API not supported, try directly\n        startRecordingWithPermission();\n      }\n    } else if (mediaRecorderRef.current) {\n      console.log('Stopping audio recording and speech recognition');\n      // Stop recording\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n\n      // Stop speech recognition\n      if (recognitionRef.current && recognitionActive) {\n        try {\n          recognitionRef.current.stop();\n        } catch (error) {\n          console.error('Error stopping speech recognition:', error);\n        }\n      }\n    }\n\n    // Helper function to start recording after permissions check\n    function startRecordingWithPermission() {\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        mediaRecorderRef.current = new MediaRecorder(stream);\n        mediaRecorderRef.current.start();\n\n        // Start speech recognition\n        if (recognitionRef.current && !recognitionActive) {\n          try {\n            recognitionRef.current.start();\n            console.log('Speech recognition started successfully');\n          } catch (error) {\n            console.error('Error starting speech recognition:', error);\n            setUseFallback(true);\n          }\n        }\n      }).catch(error => {\n        console.error('Error accessing microphone:', error);\n        console.log('MediaDevices support:', !!navigator.mediaDevices);\n        console.log('getUserMedia support:', !!navigator.mediaDevices.getUserMedia);\n        setUseFallback(true);\n      });\n    }\n  }, [isRecording, useFallback, recognitionActive]);\n  const handleManualInputChange = e => {\n    setManualInput(e.target.value);\n  };\n  const handleManualInputSubmit = () => {\n    if (manualInput.trim()) {\n      const newTranscript = transcript + ' ' + manualInput.trim();\n      setTranscript(newTranscript);\n      onTranscriptUpdate(newTranscript);\n      setManualInput('');\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleManualInputSubmit();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-recorder\",\n    children: isRecording ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-indicator\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: useFallback ? 'Manual input mode' : recognitionActive ? 'Recording audio...' : 'Initializing microphone...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), useFallback && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manual-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Speech recognition not available. Enter text manually:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: manualInput,\n            onChange: handleManualInputChange,\n            onKeyPress: handleKeyPress,\n            placeholder: \"Type your text here...\",\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleManualInputSubmit,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }, this), transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-transcript\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Current transcript:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcript\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recorder-inactive\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click \\\"Start Stream\\\" to begin recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setUseFallback(!useFallback),\n        children: useFallback ? \"Try Speech Recognition\" : \"Use Manual Text Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"Sw/blQGaDsoSKij6PUWVHCVUY6Q=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","AudioRecorder","isRecording","onTranscriptUpdate","_s","transcript","setTranscript","manualInput","setManualInput","useFallback","setUseFallback","recognitionActive","setRecognitionActive","mediaRecorderRef","recognitionRef","prevRecordingStateRef","current","console","log","window","SpeechRecognition","webkitSpeechRecognition","stop","e","continuous","interimResults","lang","start","setTimeout","error","onstart","onend","onresult","event","results","length","finalTranscript","i","resultIndex","transcriptText","isFinal","currentTranscript","onerror","navigator","permissions","query","name","then","permissionStatus","state","startRecordingWithPermission","catch","stream","getTracks","forEach","track","mediaDevices","getUserMedia","audio","MediaRecorder","handleManualInputChange","target","value","handleManualInputSubmit","trim","newTranscript","handleKeyPress","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyPress","placeholder","autoFocus","onClick","_c","$RefreshReg$"],"sources":["/Users/suleimanmahmood/Documents/software engineering stuff/BuildX2/frontend/src/components/AudioRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './AudioRecorder.css';\n\nconst AudioRecorder = ({ isRecording, onTranscriptUpdate }) => {\n  const [transcript, setTranscript] = useState('');\n  const [manualInput, setManualInput] = useState('');\n  const [useFallback, setUseFallback] = useState(false);\n  const [recognitionActive, setRecognitionActive] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const prevRecordingStateRef = useRef(false);\n  \n  // Reset transcript when starting a new recording\n  useEffect(() => {\n    // Check if isRecording changed from false to true\n    if (isRecording && !prevRecordingStateRef.current) {\n      console.log('Starting new recording, resetting transcript');\n      setTranscript('');\n      setManualInput('');\n      // Explicitly notify parent of reset\n      onTranscriptUpdate('');\n    } else if (!isRecording && prevRecordingStateRef.current) {\n      console.log('Stopping recording, final transcript:', transcript);\n      // Ensure the final transcript is sent to the parent component\n      onTranscriptUpdate(transcript);\n    }\n    \n    // Update previous recording state\n    prevRecordingStateRef.current = isRecording;\n  }, [isRecording, onTranscriptUpdate, transcript]);\n  \n  // Initialize speech recognition\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window) {\n      console.log('Speech recognition is available');\n      const SpeechRecognition = window.webkitSpeechRecognition;\n      \n      // Destroy previous instance if it exists\n      if (recognitionRef.current) {\n        try {\n          recognitionRef.current.stop();\n        } catch (e) {\n          console.log('Error stopping previous recognition instance:', e);\n        }\n      }\n      \n      // Create fresh instance\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.lang = 'en-US'; // Set language explicitly\n      \n      // Test if we can actually start it\n      try {\n        console.log('Testing speech recognition initialization...');\n        recognitionRef.current.start();\n        setTimeout(() => {\n          if (recognitionRef.current) {\n            recognitionRef.current.stop();\n            console.log('Speech recognition initialized successfully');\n          }\n        }, 500);\n      } catch (error) {\n        console.error('Error during speech recognition test:', error);\n        setUseFallback(true);\n      }\n      \n      recognitionRef.current.onstart = () => {\n        console.log('Speech recognition started');\n        setRecognitionActive(true);\n      };\n      \n      recognitionRef.current.onend = () => {\n        console.log('Speech recognition ended');\n        setRecognitionActive(false);\n        \n        // Restart recognition if we're still recording\n        if (isRecording && !useFallback) {\n          console.log('Restarting speech recognition');\n          try {\n            recognitionRef.current.start();\n          } catch (error) {\n            console.error('Error restarting speech recognition:', error);\n          }\n        }\n      };\n      \n      recognitionRef.current.onresult = (event) => {\n        console.log('Speech recognition result event received', event);\n        console.log('Number of results:', event.results.length);\n        console.log('Current transcript state:', transcript);\n        let finalTranscript = '';\n        \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcriptText = event.results[i][0].transcript;\n          console.log(`Result ${i}: ${transcriptText} (isFinal: ${event.results[i].isFinal})`);\n          if (event.results[i].isFinal) {\n            finalTranscript += transcriptText;\n          }\n        }\n        \n        if (finalTranscript) {\n          console.log('New transcript segment:', finalTranscript);\n          // Only append if we're actively recording\n          if (isRecording) {\n            const currentTranscript = transcript + ' ' + finalTranscript;\n            console.log('Updated full transcript:', currentTranscript);\n            setTranscript(currentTranscript);\n            onTranscriptUpdate(currentTranscript);\n          } else {\n            console.log('Ignoring speech recognition result while not recording');\n          }\n        } else {\n          console.log('No final transcript in this result batch');\n        }\n      };\n      \n      recognitionRef.current.onerror = (event) => {\n        console.error('Speech recognition error', event.error);\n        if (event.error === 'no-speech' || event.error === 'audio-capture' || event.error === 'not-allowed') {\n          setUseFallback(true);\n        }\n      };\n    } else {\n      console.error('Speech recognition not supported in this browser');\n      setUseFallback(true);\n    }\n    \n    return () => {\n      if (recognitionRef.current) {\n        try {\n          recognitionRef.current.stop();\n        } catch (error) {\n          console.error('Error stopping speech recognition:', error);\n        }\n      }\n    };\n  }, [isRecording, useFallback]);\n  \n  // Handle recording state changes\n  useEffect(() => {\n    if (isRecording && !useFallback) {\n      console.log('Starting audio recording and speech recognition');\n      \n      // Check microphone permissions explicitly\n      if (navigator.permissions && navigator.permissions.query) {\n        navigator.permissions.query({ name: 'microphone' })\n          .then(permissionStatus => {\n            console.log('Microphone permission status:', permissionStatus.state);\n            \n            if (permissionStatus.state === 'denied') {\n              console.error('Microphone permission denied by browser');\n              setUseFallback(true);\n              return;\n            }\n            \n            startRecordingWithPermission();\n          })\n          .catch(error => {\n            console.error('Error checking permissions:', error);\n            // Try anyway since permissions API might not be supported\n            startRecordingWithPermission();\n          });\n      } else {\n        // Permissions API not supported, try directly\n        startRecordingWithPermission();\n      }\n    } else if (mediaRecorderRef.current) {\n      console.log('Stopping audio recording and speech recognition');\n      // Stop recording\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      \n      // Stop speech recognition\n      if (recognitionRef.current && recognitionActive) {\n        try {\n          recognitionRef.current.stop();\n        } catch (error) {\n          console.error('Error stopping speech recognition:', error);\n        }\n      }\n    }\n    \n    // Helper function to start recording after permissions check\n    function startRecordingWithPermission() {\n      navigator.mediaDevices.getUserMedia({ audio: true })\n        .then(stream => {\n          mediaRecorderRef.current = new MediaRecorder(stream);\n          mediaRecorderRef.current.start();\n          \n          // Start speech recognition\n          if (recognitionRef.current && !recognitionActive) {\n            try {\n              recognitionRef.current.start();\n              console.log('Speech recognition started successfully');\n            } catch (error) {\n              console.error('Error starting speech recognition:', error);\n              setUseFallback(true);\n            }\n          }\n        })\n        .catch(error => {\n          console.error('Error accessing microphone:', error);\n          console.log('MediaDevices support:', !!navigator.mediaDevices);\n          console.log('getUserMedia support:', !!navigator.mediaDevices.getUserMedia);\n          setUseFallback(true);\n        });\n    }\n  }, [isRecording, useFallback, recognitionActive]);\n  \n  const handleManualInputChange = (e) => {\n    setManualInput(e.target.value);\n  };\n  \n  const handleManualInputSubmit = () => {\n    if (manualInput.trim()) {\n      const newTranscript = transcript + ' ' + manualInput.trim();\n      setTranscript(newTranscript);\n      onTranscriptUpdate(newTranscript);\n      setManualInput('');\n    }\n  };\n  \n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleManualInputSubmit();\n    }\n  };\n  \n  return (\n    <div className=\"audio-recorder\">\n      {isRecording ? (\n        <div className=\"recording-indicator\">\n          <div className=\"recording-icon\"></div>\n          <span>\n            {useFallback ? 'Manual input mode' : (recognitionActive ? 'Recording audio...' : 'Initializing microphone...')}\n          </span>\n          \n          {useFallback && (\n            <div className=\"manual-input\">\n              <p>Speech recognition not available. Enter text manually:</p>\n              <div className=\"input-group\">\n                <input \n                  type=\"text\" \n                  value={manualInput}\n                  onChange={handleManualInputChange}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Type your text here...\"\n                  autoFocus\n                />\n                <button onClick={handleManualInputSubmit}>Add</button>\n              </div>\n            </div>\n          )}\n          \n          {transcript && (\n            <div className=\"current-transcript\">\n              <p><strong>Current transcript:</strong></p>\n              <p>{transcript}</p>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"recorder-inactive\">\n          <p>Click \"Start Stream\" to begin recording</p>\n          <button onClick={() => setUseFallback(!useFallback)}>\n            {useFallback ? \"Try Speech Recognition\" : \"Use Manual Text Input\"}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioRecorder; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
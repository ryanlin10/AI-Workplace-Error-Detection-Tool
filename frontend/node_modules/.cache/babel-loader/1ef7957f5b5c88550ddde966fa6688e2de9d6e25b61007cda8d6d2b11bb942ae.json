{"ast":null,"code":"var _jsxFileName = \"/Users/suleimanmahmood/Documents/software engineering stuff/BuildX2/frontend/src/components/AudioRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './AudioRecorder.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = ({\n  isRecording,\n  onTranscriptUpdate\n}) => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [manualInput, setManualInput] = useState('');\n  const [useFallback, setUseFallback] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const prevRecordingStateRef = useRef(false);\n\n  // Reset transcript when starting a new recording\n  useEffect(() => {\n    // Check if isRecording changed from false to true\n    if (isRecording && !prevRecordingStateRef.current) {\n      console.log('Starting new recording, resetting transcript');\n      setTranscript('');\n      setManualInput('');\n      onTranscriptUpdate('');\n    }\n\n    // Update previous recording state\n    prevRecordingStateRef.current = isRecording;\n  }, [isRecording, onTranscriptUpdate]);\n  useEffect(() => {\n    // Initialize speech recognition\n    if ('webkitSpeechRecognition' in window) {\n      console.log('Speech recognition is available');\n      const SpeechRecognition = window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.onresult = event => {\n        let finalTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcriptText = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            finalTranscript += transcriptText;\n          }\n        }\n        if (finalTranscript) {\n          console.log('New transcript segment:', finalTranscript);\n          const currentTranscript = transcript + finalTranscript;\n          console.log('Updated full transcript:', currentTranscript);\n          setTranscript(currentTranscript);\n          onTranscriptUpdate(currentTranscript);\n        }\n      };\n      recognitionRef.current.onerror = event => {\n        console.error('Speech recognition error', event.error);\n        if (event.error === 'no-speech' || event.error === 'audio-capture' || event.error === 'not-allowed') {\n          setUseFallback(true);\n        }\n      };\n    } else {\n      console.error('Speech recognition not supported in this browser');\n      setUseFallback(true);\n    }\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [onTranscriptUpdate, transcript]);\n  useEffect(() => {\n    if (isRecording && !useFallback) {\n      console.log('Starting audio recording and speech recognition');\n      // Start recording\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        mediaRecorderRef.current = new MediaRecorder(stream);\n        mediaRecorderRef.current.start();\n\n        // Start speech recognition\n        if (recognitionRef.current) {\n          recognitionRef.current.start();\n        }\n      }).catch(error => {\n        console.error('Error accessing microphone:', error);\n        setUseFallback(true);\n      });\n    } else if (mediaRecorderRef.current) {\n      console.log('Stopping audio recording and speech recognition');\n      // Stop recording\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n\n      // Stop speech recognition\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    }\n  }, [isRecording, useFallback]);\n  const handleManualInputChange = e => {\n    setManualInput(e.target.value);\n  };\n  const handleManualInputSubmit = () => {\n    if (manualInput.trim()) {\n      const newTranscript = transcript + ' ' + manualInput.trim();\n      setTranscript(newTranscript);\n      onTranscriptUpdate(newTranscript);\n      setManualInput('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-recorder\",\n    children: isRecording ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-indicator\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Recording audio...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), useFallback && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manual-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Speech recognition not available. Enter text manually:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: manualInput,\n            onChange: handleManualInputChange,\n            placeholder: \"Type your text here...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleManualInputSubmit,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recorder-inactive\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click \\\"Start Stream\\\" to begin recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setUseFallback(!useFallback),\n        children: useFallback ? \"Try Speech Recognition\" : \"Use Manual Text Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"/hxcWMBJ2SefkWElFyP7DO2m5jw=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","AudioRecorder","isRecording","onTranscriptUpdate","_s","transcript","setTranscript","manualInput","setManualInput","useFallback","setUseFallback","mediaRecorderRef","recognitionRef","prevRecordingStateRef","current","console","log","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","onresult","event","finalTranscript","i","resultIndex","results","length","transcriptText","isFinal","currentTranscript","onerror","error","stop","navigator","mediaDevices","getUserMedia","audio","then","stream","MediaRecorder","start","catch","getTracks","forEach","track","handleManualInputChange","e","target","value","handleManualInputSubmit","trim","newTranscript","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/suleimanmahmood/Documents/software engineering stuff/BuildX2/frontend/src/components/AudioRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './AudioRecorder.css';\n\nconst AudioRecorder = ({ isRecording, onTranscriptUpdate }) => {\n  const [transcript, setTranscript] = useState('');\n  const [manualInput, setManualInput] = useState('');\n  const [useFallback, setUseFallback] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const prevRecordingStateRef = useRef(false);\n  \n  // Reset transcript when starting a new recording\n  useEffect(() => {\n    // Check if isRecording changed from false to true\n    if (isRecording && !prevRecordingStateRef.current) {\n      console.log('Starting new recording, resetting transcript');\n      setTranscript('');\n      setManualInput('');\n      onTranscriptUpdate('');\n    }\n    \n    // Update previous recording state\n    prevRecordingStateRef.current = isRecording;\n  }, [isRecording, onTranscriptUpdate]);\n  \n  useEffect(() => {\n    // Initialize speech recognition\n    if ('webkitSpeechRecognition' in window) {\n      console.log('Speech recognition is available');\n      const SpeechRecognition = window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      \n      recognitionRef.current.onresult = (event) => {\n        let finalTranscript = '';\n        \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcriptText = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            finalTranscript += transcriptText;\n          }\n        }\n        \n        if (finalTranscript) {\n          console.log('New transcript segment:', finalTranscript);\n          const currentTranscript = transcript + finalTranscript;\n          console.log('Updated full transcript:', currentTranscript);\n          setTranscript(currentTranscript);\n          onTranscriptUpdate(currentTranscript);\n        }\n      };\n      \n      recognitionRef.current.onerror = (event) => {\n        console.error('Speech recognition error', event.error);\n        if (event.error === 'no-speech' || event.error === 'audio-capture' || event.error === 'not-allowed') {\n          setUseFallback(true);\n        }\n      };\n    } else {\n      console.error('Speech recognition not supported in this browser');\n      setUseFallback(true);\n    }\n    \n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [onTranscriptUpdate, transcript]);\n  \n  useEffect(() => {\n    if (isRecording && !useFallback) {\n      console.log('Starting audio recording and speech recognition');\n      // Start recording\n      navigator.mediaDevices.getUserMedia({ audio: true })\n        .then(stream => {\n          mediaRecorderRef.current = new MediaRecorder(stream);\n          mediaRecorderRef.current.start();\n          \n          // Start speech recognition\n          if (recognitionRef.current) {\n            recognitionRef.current.start();\n          }\n        })\n        .catch(error => {\n          console.error('Error accessing microphone:', error);\n          setUseFallback(true);\n        });\n    } else if (mediaRecorderRef.current) {\n      console.log('Stopping audio recording and speech recognition');\n      // Stop recording\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      \n      // Stop speech recognition\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    }\n  }, [isRecording, useFallback]);\n  \n  const handleManualInputChange = (e) => {\n    setManualInput(e.target.value);\n  };\n  \n  const handleManualInputSubmit = () => {\n    if (manualInput.trim()) {\n      const newTranscript = transcript + ' ' + manualInput.trim();\n      setTranscript(newTranscript);\n      onTranscriptUpdate(newTranscript);\n      setManualInput('');\n    }\n  };\n  \n  return (\n    <div className=\"audio-recorder\">\n      {isRecording ? (\n        <div className=\"recording-indicator\">\n          <div className=\"recording-icon\"></div>\n          <span>Recording audio...</span>\n          \n          {useFallback && (\n            <div className=\"manual-input\">\n              <p>Speech recognition not available. Enter text manually:</p>\n              <div className=\"input-group\">\n                <input \n                  type=\"text\" \n                  value={manualInput}\n                  onChange={handleManualInputChange}\n                  placeholder=\"Type your text here...\"\n                />\n                <button onClick={handleManualInputSubmit}>Add</button>\n              </div>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"recorder-inactive\">\n          <p>Click \"Start Stream\" to begin recording</p>\n          <button onClick={() => setUseFallback(!useFallback)}>\n            {useFallback ? \"Try Speech Recognition\" : \"Use Manual Text Input\"}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioRecorder; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMe,gBAAgB,GAAGb,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMc,cAAc,GAAGd,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMe,qBAAqB,GAAGf,MAAM,CAAC,KAAK,CAAC;;EAE3C;EACAD,SAAS,CAAC,MAAM;IACd;IACA,IAAIK,WAAW,IAAI,CAACW,qBAAqB,CAACC,OAAO,EAAE;MACjDC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3DV,aAAa,CAAC,EAAE,CAAC;MACjBE,cAAc,CAAC,EAAE,CAAC;MAClBL,kBAAkB,CAAC,EAAE,CAAC;IACxB;;IAEA;IACAU,qBAAqB,CAACC,OAAO,GAAGZ,WAAW;EAC7C,CAAC,EAAE,CAACA,WAAW,EAAEC,kBAAkB,CAAC,CAAC;EAErCN,SAAS,CAAC,MAAM;IACd;IACA,IAAI,yBAAyB,IAAIoB,MAAM,EAAE;MACvCF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9C,MAAME,iBAAiB,GAAGD,MAAM,CAACE,uBAAuB;MACxDP,cAAc,CAACE,OAAO,GAAG,IAAII,iBAAiB,CAAC,CAAC;MAChDN,cAAc,CAACE,OAAO,CAACM,UAAU,GAAG,IAAI;MACxCR,cAAc,CAACE,OAAO,CAACO,cAAc,GAAG,IAAI;MAE5CT,cAAc,CAACE,OAAO,CAACQ,QAAQ,GAAIC,KAAK,IAAK;QAC3C,IAAIC,eAAe,GAAG,EAAE;QAExB,KAAK,IAAIC,CAAC,GAAGF,KAAK,CAACG,WAAW,EAAED,CAAC,GAAGF,KAAK,CAACI,OAAO,CAACC,MAAM,EAAEH,CAAC,EAAE,EAAE;UAC7D,MAAMI,cAAc,GAAGN,KAAK,CAACI,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAACpB,UAAU;UACrD,IAAIkB,KAAK,CAACI,OAAO,CAACF,CAAC,CAAC,CAACK,OAAO,EAAE;YAC5BN,eAAe,IAAIK,cAAc;UACnC;QACF;QAEA,IAAIL,eAAe,EAAE;UACnBT,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEQ,eAAe,CAAC;UACvD,MAAMO,iBAAiB,GAAG1B,UAAU,GAAGmB,eAAe;UACtDT,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEe,iBAAiB,CAAC;UAC1DzB,aAAa,CAACyB,iBAAiB,CAAC;UAChC5B,kBAAkB,CAAC4B,iBAAiB,CAAC;QACvC;MACF,CAAC;MAEDnB,cAAc,CAACE,OAAO,CAACkB,OAAO,GAAIT,KAAK,IAAK;QAC1CR,OAAO,CAACkB,KAAK,CAAC,0BAA0B,EAAEV,KAAK,CAACU,KAAK,CAAC;QACtD,IAAIV,KAAK,CAACU,KAAK,KAAK,WAAW,IAAIV,KAAK,CAACU,KAAK,KAAK,eAAe,IAAIV,KAAK,CAACU,KAAK,KAAK,aAAa,EAAE;UACnGvB,cAAc,CAAC,IAAI,CAAC;QACtB;MACF,CAAC;IACH,CAAC,MAAM;MACLK,OAAO,CAACkB,KAAK,CAAC,kDAAkD,CAAC;MACjEvB,cAAc,CAAC,IAAI,CAAC;IACtB;IAEA,OAAO,MAAM;MACX,IAAIE,cAAc,CAACE,OAAO,EAAE;QAC1BF,cAAc,CAACE,OAAO,CAACoB,IAAI,CAAC,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,CAAC/B,kBAAkB,EAAEE,UAAU,CAAC,CAAC;EAEpCR,SAAS,CAAC,MAAM;IACd,IAAIK,WAAW,IAAI,CAACO,WAAW,EAAE;MAC/BM,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAC9D;MACAmB,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC,CACjDC,IAAI,CAACC,MAAM,IAAI;QACd7B,gBAAgB,CAACG,OAAO,GAAG,IAAI2B,aAAa,CAACD,MAAM,CAAC;QACpD7B,gBAAgB,CAACG,OAAO,CAAC4B,KAAK,CAAC,CAAC;;QAEhC;QACA,IAAI9B,cAAc,CAACE,OAAO,EAAE;UAC1BF,cAAc,CAACE,OAAO,CAAC4B,KAAK,CAAC,CAAC;QAChC;MACF,CAAC,CAAC,CACDC,KAAK,CAACV,KAAK,IAAI;QACdlB,OAAO,CAACkB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDvB,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC,CAAC;IACN,CAAC,MAAM,IAAIC,gBAAgB,CAACG,OAAO,EAAE;MACnCC,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAC9D;MACAL,gBAAgB,CAACG,OAAO,CAACoB,IAAI,CAAC,CAAC;MAC/BvB,gBAAgB,CAACG,OAAO,CAAC0B,MAAM,CAACI,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACZ,IAAI,CAAC,CAAC,CAAC;;MAE1E;MACA,IAAItB,cAAc,CAACE,OAAO,EAAE;QAC1BF,cAAc,CAACE,OAAO,CAACoB,IAAI,CAAC,CAAC;MAC/B;IACF;EACF,CAAC,EAAE,CAAChC,WAAW,EAAEO,WAAW,CAAC,CAAC;EAE9B,MAAMsC,uBAAuB,GAAIC,CAAC,IAAK;IACrCxC,cAAc,CAACwC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAChC,CAAC;EAED,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAI5C,WAAW,CAAC6C,IAAI,CAAC,CAAC,EAAE;MACtB,MAAMC,aAAa,GAAGhD,UAAU,GAAG,GAAG,GAAGE,WAAW,CAAC6C,IAAI,CAAC,CAAC;MAC3D9C,aAAa,CAAC+C,aAAa,CAAC;MAC5BlD,kBAAkB,CAACkD,aAAa,CAAC;MACjC7C,cAAc,CAAC,EAAE,CAAC;IACpB;EACF,CAAC;EAED,oBACER,OAAA;IAAKsD,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5BrD,WAAW,gBACVF,OAAA;MAAKsD,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAClCvD,OAAA;QAAKsD,SAAS,EAAC;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACtC3D,OAAA;QAAAuD,QAAA,EAAM;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAE9BlD,WAAW,iBACVT,OAAA;QAAKsD,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BvD,OAAA;UAAAuD,QAAA,EAAG;QAAsD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC7D3D,OAAA;UAAKsD,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1BvD,OAAA;YACE4D,IAAI,EAAC,MAAM;YACXV,KAAK,EAAE3C,WAAY;YACnBsD,QAAQ,EAAEd,uBAAwB;YAClCe,WAAW,EAAC;UAAwB;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CAAC,eACF3D,OAAA;YAAQ+D,OAAO,EAAEZ,uBAAwB;YAAAI,QAAA,EAAC;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,gBAEN3D,OAAA;MAAKsD,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCvD,OAAA;QAAAuD,QAAA,EAAG;MAAuC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC9C3D,OAAA;QAAQ+D,OAAO,EAAEA,CAAA,KAAMrD,cAAc,CAAC,CAACD,WAAW,CAAE;QAAA8C,QAAA,EACjD9C,WAAW,GAAG,wBAAwB,GAAG;MAAuB;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvD,EAAA,CAhJIH,aAAa;AAAA+D,EAAA,GAAb/D,aAAa;AAkJnB,eAAeA,aAAa;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
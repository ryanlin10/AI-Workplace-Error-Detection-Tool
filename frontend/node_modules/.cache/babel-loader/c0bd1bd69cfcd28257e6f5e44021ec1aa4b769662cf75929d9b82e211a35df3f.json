{"ast":null,"code":"var _jsxFileName = \"/Users/suleimanmahmood/Documents/software engineering stuff/BuildX2/frontend/src/components/AudioRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './AudioRecorder.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = ({\n  isRecording,\n  onTranscriptUpdate\n}) => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const prevRecordingStateRef = useRef(false);\n\n  // Reset transcript when starting a new recording\n  useEffect(() => {\n    // Check if isRecording changed from false to true\n    if (isRecording && !prevRecordingStateRef.current) {\n      setTranscript('');\n      onTranscriptUpdate('');\n    }\n\n    // Update previous recording state\n    prevRecordingStateRef.current = isRecording;\n  }, [isRecording, onTranscriptUpdate]);\n  useEffect(() => {\n    // Initialize speech recognition\n    if ('webkitSpeechRecognition' in window) {\n      const SpeechRecognition = window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.onresult = event => {\n        let finalTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcriptText = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            finalTranscript += transcriptText;\n          }\n        }\n        const currentTranscript = transcript + finalTranscript;\n        setTranscript(currentTranscript);\n        onTranscriptUpdate(currentTranscript);\n      };\n      recognitionRef.current.onerror = event => {\n        console.error('Speech recognition error', event.error);\n      };\n    } else {\n      console.error('Speech recognition not supported in this browser');\n    }\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [onTranscriptUpdate, transcript]);\n  useEffect(() => {\n    if (isRecording) {\n      // Start recording\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        mediaRecorderRef.current = new MediaRecorder(stream);\n        mediaRecorderRef.current.start();\n\n        // Start speech recognition\n        if (recognitionRef.current) {\n          recognitionRef.current.start();\n        }\n      }).catch(error => {\n        console.error('Error accessing microphone:', error);\n      });\n    } else if (mediaRecorderRef.current) {\n      // Stop recording\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n\n      // Stop speech recognition\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    }\n  }, [isRecording]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-recorder\",\n    children: isRecording ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-indicator\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Recording audio...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recorder-inactive\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click \\\"Start Stream\\\" to begin recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"AQNyE1iYS7UCPhA3tXSrMdIsUIY=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","AudioRecorder","isRecording","onTranscriptUpdate","_s","transcript","setTranscript","mediaRecorderRef","recognitionRef","prevRecordingStateRef","current","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","onresult","event","finalTranscript","i","resultIndex","results","length","transcriptText","isFinal","currentTranscript","onerror","console","error","stop","navigator","mediaDevices","getUserMedia","audio","then","stream","MediaRecorder","start","catch","getTracks","forEach","track","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/suleimanmahmood/Documents/software engineering stuff/BuildX2/frontend/src/components/AudioRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './AudioRecorder.css';\n\nconst AudioRecorder = ({ isRecording, onTranscriptUpdate }) => {\n  const [transcript, setTranscript] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const prevRecordingStateRef = useRef(false);\n  \n  // Reset transcript when starting a new recording\n  useEffect(() => {\n    // Check if isRecording changed from false to true\n    if (isRecording && !prevRecordingStateRef.current) {\n      setTranscript('');\n      onTranscriptUpdate('');\n    }\n    \n    // Update previous recording state\n    prevRecordingStateRef.current = isRecording;\n  }, [isRecording, onTranscriptUpdate]);\n  \n  useEffect(() => {\n    // Initialize speech recognition\n    if ('webkitSpeechRecognition' in window) {\n      const SpeechRecognition = window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      \n      recognitionRef.current.onresult = (event) => {\n        let finalTranscript = '';\n        \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcriptText = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            finalTranscript += transcriptText;\n          }\n        }\n        \n        const currentTranscript = transcript + finalTranscript;\n        setTranscript(currentTranscript);\n        onTranscriptUpdate(currentTranscript);\n      };\n      \n      recognitionRef.current.onerror = (event) => {\n        console.error('Speech recognition error', event.error);\n      };\n    } else {\n      console.error('Speech recognition not supported in this browser');\n    }\n    \n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [onTranscriptUpdate, transcript]);\n  \n  useEffect(() => {\n    if (isRecording) {\n      // Start recording\n      navigator.mediaDevices.getUserMedia({ audio: true })\n        .then(stream => {\n          mediaRecorderRef.current = new MediaRecorder(stream);\n          mediaRecorderRef.current.start();\n          \n          // Start speech recognition\n          if (recognitionRef.current) {\n            recognitionRef.current.start();\n          }\n        })\n        .catch(error => {\n          console.error('Error accessing microphone:', error);\n        });\n    } else if (mediaRecorderRef.current) {\n      // Stop recording\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      \n      // Stop speech recognition\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    }\n  }, [isRecording]);\n  \n  return (\n    <div className=\"audio-recorder\">\n      {isRecording ? (\n        <div className=\"recording-indicator\">\n          <div className=\"recording-icon\"></div>\n          <span>Recording audio...</span>\n        </div>\n      ) : (\n        <div className=\"recorder-inactive\">\n          <p>Click \"Start Stream\" to begin recording</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioRecorder; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMW,gBAAgB,GAAGT,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMU,cAAc,GAAGV,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMW,qBAAqB,GAAGX,MAAM,CAAC,KAAK,CAAC;;EAE3C;EACAD,SAAS,CAAC,MAAM;IACd;IACA,IAAIK,WAAW,IAAI,CAACO,qBAAqB,CAACC,OAAO,EAAE;MACjDJ,aAAa,CAAC,EAAE,CAAC;MACjBH,kBAAkB,CAAC,EAAE,CAAC;IACxB;;IAEA;IACAM,qBAAqB,CAACC,OAAO,GAAGR,WAAW;EAC7C,CAAC,EAAE,CAACA,WAAW,EAAEC,kBAAkB,CAAC,CAAC;EAErCN,SAAS,CAAC,MAAM;IACd;IACA,IAAI,yBAAyB,IAAIc,MAAM,EAAE;MACvC,MAAMC,iBAAiB,GAAGD,MAAM,CAACE,uBAAuB;MACxDL,cAAc,CAACE,OAAO,GAAG,IAAIE,iBAAiB,CAAC,CAAC;MAChDJ,cAAc,CAACE,OAAO,CAACI,UAAU,GAAG,IAAI;MACxCN,cAAc,CAACE,OAAO,CAACK,cAAc,GAAG,IAAI;MAE5CP,cAAc,CAACE,OAAO,CAACM,QAAQ,GAAIC,KAAK,IAAK;QAC3C,IAAIC,eAAe,GAAG,EAAE;QAExB,KAAK,IAAIC,CAAC,GAAGF,KAAK,CAACG,WAAW,EAAED,CAAC,GAAGF,KAAK,CAACI,OAAO,CAACC,MAAM,EAAEH,CAAC,EAAE,EAAE;UAC7D,MAAMI,cAAc,GAAGN,KAAK,CAACI,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAACd,UAAU;UACrD,IAAIY,KAAK,CAACI,OAAO,CAACF,CAAC,CAAC,CAACK,OAAO,EAAE;YAC5BN,eAAe,IAAIK,cAAc;UACnC;QACF;QAEA,MAAME,iBAAiB,GAAGpB,UAAU,GAAGa,eAAe;QACtDZ,aAAa,CAACmB,iBAAiB,CAAC;QAChCtB,kBAAkB,CAACsB,iBAAiB,CAAC;MACvC,CAAC;MAEDjB,cAAc,CAACE,OAAO,CAACgB,OAAO,GAAIT,KAAK,IAAK;QAC1CU,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEX,KAAK,CAACW,KAAK,CAAC;MACxD,CAAC;IACH,CAAC,MAAM;MACLD,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC;IACnE;IAEA,OAAO,MAAM;MACX,IAAIpB,cAAc,CAACE,OAAO,EAAE;QAC1BF,cAAc,CAACE,OAAO,CAACmB,IAAI,CAAC,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,CAAC1B,kBAAkB,EAAEE,UAAU,CAAC,CAAC;EAEpCR,SAAS,CAAC,MAAM;IACd,IAAIK,WAAW,EAAE;MACf;MACA4B,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC,CACjDC,IAAI,CAACC,MAAM,IAAI;QACd5B,gBAAgB,CAACG,OAAO,GAAG,IAAI0B,aAAa,CAACD,MAAM,CAAC;QACpD5B,gBAAgB,CAACG,OAAO,CAAC2B,KAAK,CAAC,CAAC;;QAEhC;QACA,IAAI7B,cAAc,CAACE,OAAO,EAAE;UAC1BF,cAAc,CAACE,OAAO,CAAC2B,KAAK,CAAC,CAAC;QAChC;MACF,CAAC,CAAC,CACDC,KAAK,CAACV,KAAK,IAAI;QACdD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,CAAC,CAAC;IACN,CAAC,MAAM,IAAIrB,gBAAgB,CAACG,OAAO,EAAE;MACnC;MACAH,gBAAgB,CAACG,OAAO,CAACmB,IAAI,CAAC,CAAC;MAC/BtB,gBAAgB,CAACG,OAAO,CAACyB,MAAM,CAACI,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACZ,IAAI,CAAC,CAAC,CAAC;;MAE1E;MACA,IAAIrB,cAAc,CAACE,OAAO,EAAE;QAC1BF,cAAc,CAACE,OAAO,CAACmB,IAAI,CAAC,CAAC;MAC/B;IACF;EACF,CAAC,EAAE,CAAC3B,WAAW,CAAC,CAAC;EAEjB,oBACEF,OAAA;IAAK0C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5BzC,WAAW,gBACVF,OAAA;MAAK0C,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAClC3C,OAAA;QAAK0C,SAAS,EAAC;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACtC/C,OAAA;QAAA2C,QAAA,EAAM;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,gBAEN/C,OAAA;MAAK0C,SAAS,EAAC,mBAAmB;MAAAC,QAAA,eAChC3C,OAAA;QAAA2C,QAAA,EAAG;MAAuC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3C,EAAA,CAjGIH,aAAa;AAAA+C,EAAA,GAAb/C,aAAa;AAmGnB,eAAeA,aAAa;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}